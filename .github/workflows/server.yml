name: Build & Deploy Backend and Frontend

on:
  push:
    branches: [ main ]

# ─────────────────────────────────────────────────────────────
# 1)  Detect which folders changed with dorny/paths-filter
# ─────────────────────────────────────────────────────────────
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend:  ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/server.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/server.yml'

# ─────────────────────────────────────────────────────────────
# 2)  Build & deploy BACKEND  (runs only if backend==true)
# ─────────────────────────────────────────────────────────────
  backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    env:
      ECR_REPO: my-cargo-backend
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to ECR

      - name: Build & push backend image
        run: |
          ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ secrets.AWS_REGION }}
          IMAGE_URI=$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO

          docker build -t $IMAGE_URI:$IMAGE_TAG backend
          docker tag  $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:$IMAGE_TAG
          docker push $IMAGE_URI:latest

      - name: Deploy backend on EC2
        uses: appleboy/ssh-action@v1
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          script: |
            REGION=${{ secrets.AWS_REGION }}
            ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
            IMAGE_URI=$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/${{ env.ECR_REPO }}

            aws ecr get-login-password --region $REGION | \
              docker login --username AWS --password-stdin $ACCOUNT.dkr.ecr.$REGION.amazonaws.com

            docker pull $IMAGE_URI:${{ env.IMAGE_TAG }}
            docker pull $IMAGE_URI:latest
            docker compose -f /docker-compose.yml up -d backend

# ─────────────────────────────────────────────────────────────
# 3)  Build & deploy FRONTEND  (runs only if frontend==true)
# ─────────────────────────────────────────────────────────────
  frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    env:
      ECR_REPO: my-cargo-frontend
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to ECR

      - name: Build & push frontend image
        run: |
          ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ secrets.AWS_REGION }}
          IMAGE_URI=$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO

          docker build -f frontend/Dockerfile -t $IMAGE_URI:$IMAGE_TAG frontend
          docker tag  $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:$IMAGE_TAG
          docker push $IMAGE_URI:latest

      - name: Deploy frontend on EC2
        uses: appleboy/ssh-action@v1
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          script: |
            REGION=${{ secrets.AWS_REGION }}
            ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
            IMAGE_URI=$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/${{ env.ECR_REPO }}

            aws ecr get-login-password --region $REGION | \
              docker login --username AWS --password-stdin $ACCOUNT.dkr.ecr.$REGION.amazonaws.com

            docker pull $IMAGE_URI:${{ env.IMAGE_TAG }}
            docker pull $IMAGE_URI:latest
            docker compose -f /docker-compose.yml up -d frontend
